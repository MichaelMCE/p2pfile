

$$Z_OK           = 0
$$Z_STREAM_END   = 1
$$Z_NEED_DICT    = 2
$$Z_ERRNO       = -1
$$Z_STREAM_ERROR = -2
$$Z_DATA_ERROR   = -3
$$Z_MEM_ERROR    = -4
$$Z_BUF_ERROR    = -5
$$Z_VERSION_ERROR = -6
 ' Return codes for the compression/decompression functions. Negative
 ' values are errors, positive values are used for special but normal events.
 

$$Z_NO_COMPRESSION      = 0
$$Z_BEST_SPEED          = 1
$$Z_BEST_COMPRESSION    = 9
$$Z_DEFAULT_COMPRESSION = -1
 ' compression levels 

$$Z_FILTERED          =  1
$$Z_HUFFMAN_ONLY      =  2
$$Z_RLE               =  3
$$Z_DEFAULT_STRATEGY  =  0
 ' compression strategy; see deflateInit2() below for details 

$$Z_BINARY  = 0
$$Z_ASCII   = 1
$$Z_UNKNOWN = 2
 ' Possible values of the data_type field (though see inflate()) 

$$Z_DEFLATED =  8
 ' The deflate compression method (the only one supported in this version) 

$$Z_NULL = 0   ' for initializing zalloc, zfree, opaque 


$$Z_NO_FLUSH      = 0
$$Z_PARTIAL_FLUSH = 1  ' will be removed, use Z_SYNC_FLUSH instead 
$$Z_SYNC_FLUSH   = 2
$$Z_FULL_FLUSH   = 3
$$Z_FINISH       = 4
$$Z_BLOCK        = 5
 ' Allowed flush values; see deflate() and inflate() below for details 

$$zlib_version = "1.2.1" ' version = CSTRING$(zlibVersion())

TYPE internal_state
	XLONG	.lpstate
END TYPE


' this requires testing 
TYPE z_stream	' should this be PACKED?
    UBYTE	.lpnext_in    ' next input byte 
    ULONG	.avail_in    ' number of bytes available at next_in 
    ULONG	.total_in    ' total nb of input bytes read so far 

    UBYTE	.lpnext_out   ' next output byte should be put there 
    ULONG	.avail_out   ' remaining free space at next_out 
    ULONG	.total_out   ' total nb of bytes output so far 

    UBYTE	.lpmsg        ' last error message, NULL if no error 
    XLONG	.internal_state		' FAR *state;   ' not visible by applications 

    XLONG	.lpzalloc    ' used to allocate the internal state 
    XLONG	.lpzfree     ' used to free the internal state 
    XLONG	.opaque    ' private data object passed to zalloc and zfree 

    XLONG	.data_type    ' best guess about the data type: ascii or binary 
    ULONG	.adler        ' adler32 value of the uncompressed data 
    ULONG	.reserved     ' reserved for future use 
END TYPE


EXTERNAL CFUNCTION zlibVersion()

EXTERNAL CFUNCTION compressBound(sourceLen)
EXTERNAL CFUNCTION compress (lpDestBuffer,lpDestBufferLen,lpSrcBuffer,SrcBufferLen)
EXTERNAL CFUNCTION uncompress (lpDestBuffer,lpDestBufferLen,lpSrcBuffer,SrcBufferLen)
EXTERNAL CFUNCTION compress2 (lpDestBuffer,lpDestBufferLen,lpSrcBuffer,SrcBufferLen,Compressionlevel)
'note: compression level, 0 = no compression; 9 = best compression

EXTERNAL CFUNCTION crc32 (crc, lpbuffer, length)
EXTERNAL CFUNCTION adler32 (adler, lpbuffer, length)
' Adler-32 (by Mark Adler) is a checksum algorithm used by ZIP files that is (can be?) 33% faster than CRC32

EXTERNAL CFUNCTION zlibCompileFlags ()
